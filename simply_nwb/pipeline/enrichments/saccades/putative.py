import logging
from typing import Any

import numpy as np
import pandas as pd
from pynwb import NWBFile

from simply_nwb import SimpleNWB
from simply_nwb.pipeline import Enrichment
from simply_nwb.pipeline.value_mapping import NWBValueMapping


class PutativeSaccadeEnrichment(Enrichment):
    def __init__(self, stim_name="RightCamStim"):
        super().__init__()
        self._mapping = self._make_mapping(stim_name)
        self.logger = logging.getLogger("PutativeSaccade")

    @staticmethod
    def from_csv(nwbfile: NWBFile, filename: str, stim_name: str = "RightCamStim",
                 units: list[str] = None, sampling_rate: float = 200.0, comments: str = None,
                 description: str = None) -> 'PutativeSaccadeEnrichment':
        """
        Create a PutativeSaccadeEnrichment from a CSV file rather than automagically from an NWB file with existing data

        :param nwbfile: NWBFile object to add the raw data to as this is enriched
        :param filename: filepath to the .csv file formatted in DLC format
        :param stim_name: Name of the stimulus to label as it's being inserted
        :param units: List of units of the columns of DLC if not set has a default
        :param sampling_rate: Sampling rate of the video recording that was run through DLC
        :param comments: Comments
        :param units:
        :param description: Description, will be autogenerated if not supplied
        :return: Enrichment object
        """

        enr = PutativeSaccadeEnrichment()

        SimpleNWB.eyetracking_add_to_processing(
            nwbfile,
            filename,
            module_name=stim_name,
            sampling_rate=sampling_rate,
            units=units,
            comments=comments,
            description=description
        )

        return enr

    def run(self, pynwb_obj):
        pass

    @staticmethod
    def get_name() -> str:
        return "PutativeSaccades"

    @staticmethod
    def _make_mapping(stim_name):
        return NWBValueMapping({
            "x": [lambda x: x.processing, stim_name, "pupilCenter_x"],
            "y": [lambda x: x.processing, stim_name, "pupilCenter_y"],
            "likelihood": [lambda x: x.processing, stim_name, "pupilCenter_likelihood"]
        })

    @staticmethod
    def default_mapping() -> NWBValueMapping:
        return PutativeSaccadeEnrichment._make_mapping("RightCamStim")

    def get_val(self, val_key: str, nwb: NWBFile) -> Any:
        """
        Get a value from this enrichment in a given NWB

        :param val_key: key for the value in this enrichment's namespace
        :param nwb: nwbfile to pull from
        :return: value or error if it doesn't exist
        """
        return self._mapping.get(val_key, nwb)


# TODO Add content from here https://github.com/jbhunt/myphdlib/blob/5c5fe627507046e888eabcd963c47906dfbea7b1/myphdlib/pipeline/saccades.py#L614

